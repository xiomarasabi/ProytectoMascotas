// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categorias {
  id       Int        @id @default(autoincrement())
  nombre   String     @db.VarChar(80)
  mascotas mascotas[]
}

model generos {
  id       Int        @id @default(autoincrement())
  nombre   String     @db.VarChar(80)
  mascotas mascotas[]
}

model mascotas {
  id           Int        @id @default(autoincrement())
  foto         String     @db.VarChar(255)
  nombre       String     @db.VarChar(80)
  estado       estado
  raza_id      Int
  categoria_id Int
  genero_id    Int
  usuario_id   Int?
  categorias   categorias @relation(fields: [categoria_id], references: [id], onUpdate: Restrict, map: "mas_ca")
  generos      generos    @relation(fields: [genero_id], references: [id], onUpdate: Restrict, map: "mas_ge")
  razas        razas      @relation(fields: [raza_id], references: [id], onUpdate: Restrict, map: "mas_ra")
  usuarios     usuarios?   @relation(fields: [usuario_id], references: [id], onUpdate: Restrict, map: "usu_mascota")
  @@index([categoria_id], map: "mas_ca")
  @@index([genero_id], map: "mas_ge")
  @@index([raza_id], map: "mas_ra")
  @@index([usuario_id], map: "usu_mascota")
}

model razas {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  mascotas mascotas[]
}

model usuarios {
  id         Int      @id @default(autoincrement())
  nombre     String   @db.VarChar(50)
  email      String   @unique @db.VarChar(80) 
  password String @db.VarChar(100)
  mascotas mascotas[]
}

enum estado{
  Adoptado
  Disponible
}
